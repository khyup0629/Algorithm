# 소수 판별 (Primality test)

+ [소수 (Prime Number)](#소수-Prime-Number)
+ [소수 판별 알고리즘](#소수-판별-알고리즘)
	+ [기본 코드 분석](#기본-코드-분석)
	+ [성능 분석]
	+ [약수의 성질](#약수의-성질)
	+ [개선된 코드 분석](#개선된-코드-분석)

---
## 소수 (Prime Number)

+ 소수란 1보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로는 나누어 떨어지지 않는 자연수이다.
	+ 6은 1, 2, 3, 6으로 나누어 떨어지므로 소수가 아니다.
	+ 7은 1과 7을 제외하고는 나누어 떨어지지 않으므로 소수이다.
+ 코딩 테스트에선 어떠한 자연수가 소수인지 아닌지 판별해야 하는 문제가 자주 출제된다.

## 소수 판별 알고리즘

+ 먼저 기본 코드를 알아보고, 약수의 성질을 이용한 개선된 코드를 살펴보자.

### 기본 코드 분석
``` python
# 소수 판별 함수
def is_prime_number(x):
    # 2부터 x-1까지의 모든 수를 확인하며
    for i in range(2, x):
        # x가 해당 수로 나누어떨어진다면
        if x % i == 0:
            return False # 소수가 아님
    return True # 소수임

print(is_prime_number(4)) # 4는 소수가 아님
print(is_prime_number(7)) # 7은 소수임
```

### 성능 분석

+ 2부터 X-1까지의 모든 자연수에 대하여 연산을 수행.
	+ 모든 수를 하나씩 확인한다는 점에서 시간 복잡도는 **O(X)**이다.

### 약수의 성질

+ 모든 약수가 **가운데 약수(제곱근)를 기준**으로 곱셈 연산에 대해 대칭을 이루는 것을 알 수 있다.
	+ 16의 약수는 1, 2, 4, 8, 16
	+ 가운데 약수 4를 기준으로 대칭인 1 X 16 = 16, 2 X 8 = 16인 것을 알 수 있다.
+ 따라서 특정한 자연수의 모든 약수를 찾을 때 **가운데 약수(제곱근)까지만 확인**하면 된다.
	+ 16이 2로 나누어 떨어진다는 것은 8로도 나누어 떨어진다는 것을 의미.
	+ 16의 제곱근인 4까지만 탐색하면 됨.

### 개선된 코드 분석
``` python
import math

# 소수 판별 함수
def is_prime_number(x):
    # 2부터 x의 제곱근까지의 모든 수를 확인하며
    for i in range(2, int(math.sqrt(x)) + 1):
        # x가 해당 수로 나누어떨어진다면
        if x % i == 0:
            return False # 소수가 아님
    return True # 소수임

print(is_prime_number(4)) # 4는 소수가 아님
print(is_prime_number(7)) # 7은 소수임
```