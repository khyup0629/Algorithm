# 누적 합과 투 포인터를 이용한 알고리즘
# 투 포인터만을 이용한 알고리즘보다 계산 시간과 메모리가 근소하게 더 요구되었다.
# 아무래도 누적 합을 위한 메모리와 계산이 더해졌던 것 같다.
# 수의 개수, 기준값의 범위
n, s = map(int, input().split())
array = list(map(int, input().split()))

# 누적 합
sum_a = [0] * (n+1)
for i in range(1, n+1):
    sum_a[i] = sum_a[i-1] + array[i-1]

_min = int(1e9)
end = 1
# 투 포인터
for start in range(n):
    while end < n and sum_a[end] - sum_a[start] < s:
        end += 1
    if sum_a[end] - sum_a[start] >= s:
        _min = min(_min, end - start)

if _min == int(1e9):
    print(0)
else:
    print(_min)

"""
문제
10,000 이하의 자연수로 이루어진 길이 N짜리 수열이 주어진다. 이 수열에서 연속된 수들의 부분합 중에 그 합이 S 이상이 되는 것 중, 
가장 짧은 것의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N (10 ≤ N < 100,000)과 S (0 < S ≤ 100,000,000)가 주어진다. 둘째 줄에는 수열이 주어진다. 
수열의 각 원소는 공백으로 구분되어져 있으며, 10,000이하의 자연수이다.

출력
첫째 줄에 구하고자 하는 최소의 길이를 출력한다. 만일 그러한 합을 만드는 것이 불가능하다면 0을 출력하면 된다.

예제 입력 1 
10 15
5 1 3 5 10 7 4 9 2 8
예제 출력 1 
2
예제 입력 2
10 100000
5 1 3 5 10 7 4 9 2 8
예제 출력 2
0
"""