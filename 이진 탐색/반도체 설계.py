# 가장 긴 증가하는 부분 수열의 길이를 구하는 것으로 생각하면 된다.
# '가장 긴 증가하는 부분 수열 2' 문제 참조
# 입력값의 범위가 넓으므로 시간 복잡도를 줄이기 위해서는 이진 탐색을 이용해야 한다.

from bisect import bisect_left
n = int(input())
array = list(map(int, input().split()))

result = [array[0]]
for i in range(1, n):
    if array[i] < result[-1]:
        index = bisect_left(result, array[i])
        result[index] = array[i]
    else:
        result.append(array[i])
# 가장 긴 증가하는 부분 수열의 정확한 원소들을 구할 순 없지만
# 길이는 구할 수 있다.
print(len(result))

"""
문제
반도체를 설계할 때 n개의 포트를 다른 n개의 포트와 연결해야 할 때가 있다.

예를 들어 왼쪽 그림이 n개의 포트와 다른 n개의 포트를 어떻게 연결해야 하는지를 나타낸다. 
하지만 이와 같이 연결을 할 경우에는 연결선이 서로 꼬이기 때문에 이와 같이 연결할 수 없다. 
n개의 포트가 다른 n개의 포트와 어떻게 연결되어야 하는지가 주어졌을 때, 
연결선이 서로 꼬이지(겹치지, 교차하지) 않도록 하면서 최대 몇 개까지 연결할 수 있는지를 알아내는 프로그램을 작성하시오

입력
첫째 줄에 정수 n(1 ≤ n ≤ 40,000)이 주어진다. 다음 줄에는 차례로 1번 포트와 연결되어야 하는 포트 번호, 
2번 포트와 연결되어야 하는 포트 번호, …, n번 포트와 연결되어야 하는 포트 번호가 주어진다. 
이 수들은 1 이상 n 이하이며 서로 같은 수는 없다고 가정하자.

출력
첫째 줄에 최대 연결 개수를 출력한다.

예제 입력 1 
6
4 2 6 3 1 5
예제 출력 1 
3
"""