순차 탐색 : 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인
이진 탐색 : 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법
 : 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정

이진 탐색의 시간 복잡도
- 단계마다 탐색 범위를 2로 나누는 것과 동일
- 예를 들어 초기 데이터 개수가 32개이면, 다음 탐색에는 16개, 8개, 4개로 절반씩 줄어들기 때문
- 시간 복잡도는 O(logN)

from bisect import bisect_left, bisect_right

bisect_left(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스 반환
bisect_right(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스 반환
- 위의 라이브러리를 활용해서
 배열에서 특정 범위에 속하는 데이터 개수를 구할 수 있다.

파라메트릭 서치
- 최적화 문제를 결정 문제('예' 혹은 '아니오')로 바꾸어 해결하는 기법
 예시 : 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
- 일반적으로 코딩 테스트에서 파라메트릭 서치 문제는 이진 탐색을 이용하여 해결 가능

완전 탐색 문제 같은데 입력값의 범위나 계산 횟수가 10억 정도로 크면
이진 탐색을 고려해야 한다.