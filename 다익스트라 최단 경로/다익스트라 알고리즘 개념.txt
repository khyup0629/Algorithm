최단 경로 문제
- 다양한 문제 상황
 : 한 지점에서 다른 한 지점까지의 최단 경로
 : 한 지점에서 다른 모든 지점까지의 최단 경로
 : 모든 지점에서 다른 모든 지점까지의 최단 경로

다익스트라 최단 경로 알고리즘
- 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산
- 다익스트라 알고리즘은 음의 간선이 없을 때 정상적으로 동작
 : 현실 세계의 도로(간선)은 음의 간선으로 표현되지 않는다.
- 다익스트라 알고리즘은 그리디 알고리즘으로 분류
 : 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복
- 길 찾기 문제는 다이나믹 프로그래밍의 원리가 적용됨
 : A에서 C까지 가는 경로를 계산할 때 B를 거쳐가야 된다고 하면
 A에서 B까지의 최단 경로 B에서 C까지의 최단경로를 모두 고려하기 때문
- 다이나믹 프로그래밍 + 그리디 알고리즘

다익스트라 알고리즘 동작 과정
1. 출발 노드를 설정
2. 최단 거리 테이블을 초기화(자기 자신은 0, 다른 모든 노드는 INF)
3. '방문하지 않은 노드 중'에서 최단 거리가 가장 짧은 노드를 선택
(그리디 알고리즘으로 분류할 수 있는 이유)
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신
(다이나믹 프로그래밍 알고리즘의 원리 적용)
5. 위 과정에서 3번과 4번을 반복
- 각 단계를 거치며 한 번 처리된 노드의 최단 거리는 고정
- 테이블에 각 노드까지의 최단 거리 정보가 저장

다익스트라 알고리즘 : 힙 자료구조 이용
- 힙 자료구조 이용하는 다익스트라 알고리즘의 시간 복잡도는 O(ElogV)
- 노드를 하나씩 꺼내 검사하는 반복문(while)은 노드의 개수 V 이상의 횟수로는 처리되지 않는다.
 : 결과적으로 현재 우선순위 큐에서 꺼낸 노드와 연결된 다른 노드들을 확인하는 총횟수는
 최대 간선의 개수(E)만큼 연산이 수행될 수 있다.
- 직관적으로 전체 과정은 E개의 원소를 우선순위 큐에 넣었다가 모두 빼내는 연산과 매우 유사
 : 시간 복잡도를 O(ElogE)로 판단 가능
 : 중복 간선을 포함하지 않는 경우 이를 O(ElogV)로 정리 가능