# N의 입력 최대 개수가 100,000 이므로 O(N^2)의 시간복잡도를 가지면 안됨
# 현재 도시와 현재 바로 다음 도시들을 차례대로 1대1 비교하면서
# 비용을 비교해 현재 도시 비용이 더 작으면 거리를 누적
n = int(input())
# 도시 사이의 거리
dist = list(map(int, input().split(' ')))
# 방문/미방문 여부
visited = [False] * (n-1)
# 1리터 당 기름값
cost = list(map(int, input().split(' ')))

result = 0
# 이중 for 문을 쓰되 시간 복잡도가 O(N^2)가 되지는 않는다.
for i in range(n-1):
    dist_sum = dist[i]
    # 이미 비용처리를 앞서 했다면 밑의 for 문을 생략
    if visited[i]:  # 시간 복잡도 개선
        continue
    # 시작 도시 바로 다음 도시부터 차례대로 비용 비교
    for j in range(i+1, n):
        # 비용이 뒤에 도시보다 크거나 도시의 끝에 도달하면
        if cost[i] > cost[j] or j == (n-1):
            result += cost[i] * dist_sum
            break  # 반복 종료
        else:
            # 거리를 누적
            dist_sum += dist[j]
            # 비용처리를 했다면 해당 인덱스에 대해 방문한 것으로 친다.
            visited[j] = True

print(result)

"""
문제
어떤 나라에 N개의 도시가 있다. 이 도시들은 일직선 도로 위에 있다. 편의상 일직선을 수평 방향으로 두자. 
제일 왼쪽의 도시에서 제일 오른쪽의 도시로 자동차를 이용하여 이동하려고 한다. 
인접한 두 도시 사이의 도로들은 서로 길이가 다를 수 있다. 도로 길이의 단위는 km를 사용한다.

처음 출발할 때 자동차에는 기름이 없어서 주유소에서 기름을 넣고 출발하여야 한다. 
기름통의 크기는 무제한이어서 얼마든지 많은 기름을 넣을 수 있다. 도로를 이용하여 이동할 때 1km마다 1리터의 기름을 사용한다. 
각 도시에는 단 하나의 주유소가 있으며, 도시 마다 주유소의 리터당 가격은 다를 수 있다. 
가격의 단위는 원을 사용한다.

예를 들어, 이 나라에 다음 그림처럼 4개의 도시가 있다고 하자. 
원 안에 있는 숫자는 그 도시에 있는 주유소의 리터당 가격이다. 도로 위에 있는 숫자는 도로의 길이를 표시한 것이다. 



제일 왼쪽 도시에서 6리터의 기름을 넣고, 더 이상의 주유 없이 제일 오른쪽 도시까지 이동하면 총 비용은 30원이다. 
만약 제일 왼쪽 도시에서 2리터의 기름을 넣고(2×5 = 10원) 다음 번 도시까지 이동한 후 3리터의 기름을 넣고(3×2 = 6원) 
다음 도시에서 1리터의 기름을 넣어(1×4 = 4원) 제일 오른쪽 도시로 이동하면, 총 비용은 20원이다. 
또 다른 방법으로 제일 왼쪽 도시에서 2리터의 기름을 넣고(2×5 = 10원) 다음 번 도시까지 이동한 후 4리터의 기름을 넣고(4×2 = 8원) 
제일 오른쪽 도시까지 이동하면, 총 비용은 18원이다.

각 도시에 있는 주유소의 기름 가격과, 각 도시를 연결하는 도로의 길이를 입력으로 받아 
제일 왼쪽 도시에서 제일 오른쪽 도시로 이동하는 최소의 비용을 계산하는 프로그램을 작성하시오.

입력
표준 입력으로 다음 정보가 주어진다. 첫 번째 줄에는 도시의 개수를 나타내는 정수 N(2 ≤ N ≤ 100,000)이 주어진다. 
다음 줄에는 인접한 두 도시를 연결하는 도로의 길이가 제일 왼쪽 도로부터 N-1개의 자연수로 주어진다. 
다음 줄에는 주유소의 리터당 가격이 제일 왼쪽 도시부터 순서대로 N개의 자연수로 주어진다. 
제일 왼쪽 도시부터 제일 오른쪽 도시까지의 거리는 1이상 1,000,000,000 이하의 자연수이다. 
리터당 가격은 1 이상 1,000,000,000 이하의 자연수이다. 

출력
표준 출력으로 제일 왼쪽 도시에서 제일 오른쪽 도시로 가는 최소 비용을 출력한다. 

예제 입력 1 
4
2 3 1
5 2 4 1
예제 출력 1 
18
예제 입력 2 
4
3 3 4
1 1 1 1
예제 출력 2 
10
예제 입력 3
2
1
2 1
예제 출력 3
2
"""
